/* This section comprises the bulk addition of Indian ministries and departments, Indian courts and tribunals. Courts are defined up to the district level. They are connected via an
 * order of precedence. Also parts of the ontology relating to NIA (cheque bouncing cases) are also specified.
 * One of the major steps here involves inclusion of GeoNames ontology to define location information in India. This allow us to not only drill down to State and District level with India,
 * but also specify any location around the World. We use GeoNames to specify location of courts. Note: Ditrict courts here are directly generated by the district names from GeoNames
 * database. This results in certain non-existing district courts to be added (which doesn't create any conflicts as we do not use them elsewhere). Also, naming of the district courts may
 * not be consistent with what we want due to this information being taken from GeoNames. This naming needs to be aligned.
 * The data from the GeoNames ontology is retrieved via the GeoNamesHandler class.
 */

package onted;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Pattern;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

public class BatchUpdate_final_paper {

	public static Set<String> listFilesUsingDirectoryStream(String dir) throws IOException {
	    Set<String> fileSet = new HashSet<>();
	    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dir))) {
	        for (Path path : stream) {
	            if (!Files.isDirectory(path)) {
	                fileSet.add(path.getFileName()
	                    .toString());
	            }
	        }
	    }
	    return fileSet;
	}

    public static void splitFile(String path, String inputFilename, String splitOn) {
        String firstHalfFilePath = path + "1_" + inputFilename;
        String secondHalfFilePath = path + "2_" + inputFilename;

        try (BufferedReader reader = new BufferedReader(new FileReader(path + inputFilename));
             PrintWriter writerFirstHalf = new PrintWriter(new FileWriter(firstHalfFilePath));
             PrintWriter writerSecondHalf = new PrintWriter(new FileWriter(secondHalfFilePath))) {

            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(splitOn, 2);  // Split the line at the first occurrence of splitOn

                if (parts.length == 2) {  // Ensure the line has two parts
                    writerFirstHalf.println(parts[0].trim());
                    writerSecondHalf.println(parts[1].trim());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	public static String getCleanString(String myString, String remove) {
		Pattern myPattern = Pattern.compile("(?i)" + remove);
		return myString.replaceFirst(myPattern.toString(), "").strip();
	}
	
	public static ArrayList<String> createEntitiesWithDef(String parentIRI, String entityFile, String defFile) throws IOException {
		ArrayList<String> entityIRIs = myOnt.addSubClass(parentIRI, myOnt.entitiesFromFile(entityFile, "", ""));
		ArrayList<String> entityDefs = myOnt.entitiesFromFile(defFile, "", "");
		for (int i=0; i<entityIRIs.size(); i++) {
			myOnt.addSKOSDefinitionAnnotation(entityIRIs.get(i), entityDefs.get(i));
		}
		return entityIRIs;
	}
	
	public static <V, K> Map<V, K> invertMap(Map<K, V> map) {
	    Map<V, K> inversedMap = new HashMap<V, K>();
	    for (Entry<K, V> entry : map.entrySet()) {
	        inversedMap.put(entry.getValue(), entry.getKey());
	    }
	    return inversedMap;
	}

	private static MyOntology myOnt;
	//@SuppressWarnings("unchecked")
	public static void main(String[] args) throws OWLOntologyCreationException, OWLOntologyStorageException, IOException {
		// TODO Auto-generated method stub
		myOnt = new MyOntology("LMSS.owl", "http://lmss.sali.org/");
		
		// Updating laws relating to NIA and Check Bounce cases
		
		String checkPaymentIRI = "http://lmss.sali.org/R54wZIS4Qj7j9089Oe2xh5";
		
		String checkTransType = myOnt.addSubClass("http://lmss.sali.org/RhBgnef56iLBXYfPqWQE41", "Check Transaction Type");
		//String checkTransType = myOnt.addSubClass("http://lmss.sali.org/R54wZIS4Qj7j9089Oe2xh5", "Check Transaction Type");
		ArrayList<String> checkTransTypeSubClasses = createEntitiesWithDef(checkTransType, "Litigation Criminal Claims 1.txt", "Litigation Criminal Claims 2.txt");
		
		String transactionStatus = myOnt.addSubClass("http://lmss.sali.org/RhBgnef56iLBXYfPqWQE41", "Transaction Status");
		ArrayList<String> transactionStatusSubClasses = createEntitiesWithDef(transactionStatus, "Transaction Status 1.txt", "Transaction Status 2.txt");
		
		String hasStatus = myOnt.addNewObjectProperty("hasStatus", checkPaymentIRI, transactionStatus);
		String hasTransaction = myOnt.addNewObjectProperty("hasTransaction", checkPaymentIRI, checkTransType);
		
		String badCheck = myOnt.addSubClass(checkPaymentIRI, "Bad Check");
		
		String checkBounceCriminalClaims = myOnt.addSubClass("http://lmss.sali.org/R7u1GstOpfAmZ3mI7yFcbgU", "Check Bounce Criminal Claim");
		ArrayList<String> checkBounceCriminalClaimsList = createEntitiesWithDef(checkBounceCriminalClaims, "checkBounceCriminalClaims1.txt", "checkBounceCriminalClaims2.txt");
		
		String badCheckCrimeDefenses = myOnt.addSubClass("http://lmss.sali.org/R8mREFTbCVNHGAdqneLSd0d", "Check Bounce Criminal Defense");
		ArrayList<String> badCheckCrimeDefencesSubClasses = createEntitiesWithDef(badCheckCrimeDefenses, "Litigation Criminal Defenses 1.txt", "Litigation Criminal Defenses 2.txt");
		
		String hasClaim = myOnt.addNewObjectProperty("hasClaim", badCheck, checkBounceCriminalClaims);
		String hasDefense = myOnt.addNewObjectProperty("hasDefense", badCheck, badCheckCrimeDefenses);
		
//		String badCheckClaims = myOnt.addSubClass("http://lmss.sali.org/RBSewRxgjTh2VhFX6itIoFA", "Bad Check Crime Claims");
//		String hasTransaction = myOnt.addNewObjectProperty("hasTransaction", badCheckClaims, checkTransType);
		
		String specialRulesOfEvidence = myOnt.addSubClass("http://lmss.sali.org/RDqvTdg5IFDf2Oyf3zT3z50", "Special Rules of Evidence for Bad Check Crime");
		ArrayList<String> specialRulesOfEvidenceSubClasses = createEntitiesWithDef(specialRulesOfEvidence, "Special Rules of Evidence 1.txt", "Special Rules of Evidence 2.txt");
		
		ArrayList<String> ruleOfPresumptionSubClasses = createEntitiesWithDef(specialRulesOfEvidenceSubClasses.get(0), "Rule of Presumption 1.txt", "Rule of Presumption 2.txt");
		
		String metropolitanMagistrate = myOnt.addSubClass("http://lmss.sali.org/RihNVfYYtmWzQWciwxquKe", "Metropolitan Magistrate or Judicial Magistrate of First Class");

		//myOnt.importOntology("https://www.geonames.org/ontology");
		//myOnt.importOntology("https://schema.org/docs/schemaorg.owl");
		
		// Constructing properties
//		String partOf = myOnt.addNewObjectProperty("partOf", "http://www.w3.org/2002/07/owl#Thing", "http://www.w3.org/2002/07/owl#Thing");
//		String locatedIn = myOnt.addNewObjectProperty("locatedIn", "https://www.geonames.org/ontology#Feature", "https://www.geonames.org/ontology#Feature");

		// Updating Ministries and Departments
		
		String indianGovernment = myOnt.addSubClass("http://lmss.sali.org/RBQGborh1CfXanGZipDL0Qo", "Indian Government");
		String indianCentralGovernment = myOnt.addSubClass(indianGovernment, "Indian Central Government");
		String indianCentralMinistries = myOnt.addSubClass(indianCentralGovernment, "Indian Central Ministry");
		String indianCentralDepartments = myOnt.addSubClass(indianCentralGovernment, "Indian Central Department");
		ArrayList<String> centralMinistriesList = myOnt.addIndividuals(indianCentralMinistries, myOnt.entitiesFromFile("Ministries.txt", "", ""));
		ArrayList<String> centralDepartmentsList = myOnt.addIndividuals(indianCentralDepartments, myOnt.entitiesFromFile("Departments.txt", "", ""));
		
		//Updating forums and tribunals
		
		String parentTribunal = "http://lmss.sali.org/R85OMPBjCJJv2cpg2RCwYim";
		String indianTribunals = myOnt.addSubClass(parentTribunal, "India Tribunal");
		String indianAppellateTribunals = myOnt.addSubClass(parentTribunal, "India Appellate Tribunal");
		ArrayList<String> tribunalsList = myOnt.addIndividuals(indianTribunals, myOnt.entitiesFromFile("India Tribunal.txt", "", ""));
		ArrayList<String> appelateTribunalsList = myOnt.addIndividuals(indianAppellateTribunals, myOnt.entitiesFromFile("India Appellate Tribunal.txt", "", ""));
		
		ArrayList<String> courtForumJurisdictionTypes = myOnt.addIndividuals("http://lmss.sali.org/R9sbuHkJC9aqDlHAgw58VSB", myOnt.entitiesFromFile("Jurisdictions.txt", "", ""));
		
		String summaryCourtTrial = myOnt.addSubClass("http://lmss.sali.org/RpNOHS1FAVVJkNXIN6L6y7", "Summary Court Trial");
		myOnt.assertSomeValuesFromAxiom("http://lmss.sali.org/RBSewRxgjTh2VhFX6itIoFA", summaryCourtTrial, "http://www.w3.org/2000/01/rdf-schema#seeAlso");
		
		// Updating forums and venues
		
		String indianCourt = myOnt.addSubClass("http://lmss.sali.org/R9v17ZYsnDkNSEZkvD36nhT", "Indian court");
		String supremeCourt = myOnt.addSubClass(indianCourt, "Supreme Court of India");
		String theSupremeCourt = myOnt.addIndividual(supremeCourt, "Supreme Court of India");
		System.out.println("IRI for Delhi city: " + GeoNamesHandler.getGeoIRI("1273294"));
		myOnt.assertObjectPropertyAxiom(theSupremeCourt, GeoNamesHandler.getGeoIRI("1273294"), "http://www.geonames.org/ontology#locatedIn");
		String highCourt = myOnt.addSubClass(indianCourt, "High Court");
		String districtCourt = myOnt.addSubClass(indianCourt, "District Court");
		String precededBy = myOnt.addNewObjectPropertyWithDR("precededBy", "http://lmss.sali.org/RBjHwNNG2ASVmasLFU42otk", "http://lmss.sali.org/RBjHwNNG2ASVmasLFU42otk");
		String hasPrecedenceOver = myOnt.addNewObjectPropertyWithDR("hasPrecedenceOver", "http://lmss.sali.org/RBjHwNNG2ASVmasLFU42otk", "http://lmss.sali.org/RBjHwNNG2ASVmasLFU42otk");
		myOnt.assertSomeValuesFromAxiom(highCourt, supremeCourt, precededBy);
		myOnt.assertSomeValuesFromAxiom(districtCourt, highCourt, precededBy);
		myOnt.assertSomeValuesFromAxiom(supremeCourt, highCourt, hasPrecedenceOver);
		myOnt.assertSomeValuesFromAxiom(highCourt, districtCourt, hasPrecedenceOver);
		ArrayList<String> highCourtsList = myOnt.addIndividuals(highCourt, myOnt.entitiesFromFile("HC.txt", "", ""));
		BatchUpdate_final.splitFile("", "city-state_pairs.txt", ",");
		ArrayList<String> hc_cities = myOnt.entitiesFromFile("1_city-state_pairs.txt", "", "");
		ArrayList<String> hc_states = myOnt.entitiesFromFile("2_city-state_pairs.txt", "", "");
		System.out.println(hc_cities.size());
		HashMap<String, String> cityIDMap = (HashMap<String, String>) BatchUpdate_final.invertMap((HashMap<String, String>) GeoNamesHandler.getObject("CityID.txt"));
		//System.out.println(cityIDMap.get("Prayagraj"));

		// Creating region classes for India
		
		String geoRegion = myOnt.addSubClass("http://www.w3.org/2002/07/owl#Thing", "Geographical Region");
//		myOnt.assertObjectPropertyAxiom("http://lmss.sali.org/R9v17ZYsnDkNSEZkvD36nhT", "http://lmss.sali.org/d3a15d62-1772-4c67-8531-cfb91393b2b041f02855-1617-4a29-b696-e062c25f1e69", "http://www.geonames.org/ontology#locatedIn");
		myOnt.assertSomeValuesFromAxiom("http://lmss.sali.org/R9v17ZYsnDkNSEZkvD36nhT", geoRegion, "http://www.geonames.org/ontology#locatedIn");
		myOnt.setType(geoRegion, "http://www.geonames.org/ontology#Feature");
		String country = myOnt.addSubClass(geoRegion, "Country");
		String state = myOnt.addSubClass(geoRegion, "State and Union Territory");
		String district = myOnt.addSubClass(geoRegion, "District");
		String city = myOnt.addSubClass(geoRegion, "City");
		myOnt.assertSomeValuesFromAxiom(country, state, "http://schema.org/containsPlace");
		myOnt.assertSomeValuesFromAxiom(state, district, "http://schema.org/containsPlace");
//		myOnt.assertSomeValuesFromAxiom(state, city, "http://schema.org/containsPlace");
		String countryIRI = GeoNamesHandler.getGeoIRI("1269750");

		// Creating and linking high courts and asserting location data and types
		
		HashMap<String, String> stateUTGeoID = (HashMap<String, String>) BatchUpdate_final.invertMap((HashMap<String, String>) GeoNamesHandler.getObject("stateUT.txt"));
		HashMap<String, String> stateHC = new HashMap<String, String>();
		for (int i = 0; i<highCourtsList.size(); i++) {
			String cityIRI = GeoNamesHandler.getGeoIRI(cityIDMap.get(hc_cities.get(i)));
			String stateIRI = GeoNamesHandler.getGeoIRI(stateUTGeoID.get(hc_states.get(i)));
			//System.out.println("------------------------------" + stateIRI);
			myOnt.assertObjectPropertyAxiom(countryIRI, stateIRI, "http://schema.org/containsPlace");
			myOnt.assertObjectPropertyAxiom(countryIRI, cityIRI, "http://schema.org/containsPlace");
			myOnt.assertObjectPropertyAxiom(stateIRI, cityIRI, "http://schema.org/containsPlace");
			myOnt.assertObjectPropertyAxiom(highCourtsList.get(i), cityIRI, "http://www.geonames.org/ontology#locatedIn");
			myOnt.labelEntity(cityIRI, hc_cities.get(i), false);
			myOnt.setType(cityIRI, city);
			myOnt.assertObjectPropertyAxiom(highCourtsList.get(i), theSupremeCourt, precededBy);
			myOnt.assertObjectPropertyAxiom(theSupremeCourt, highCourtsList.get(i), hasPrecedenceOver);
			stateHC.put(stateUTGeoID.get(hc_states.get(i)), highCourtsList.get(i));
		}
		
		// Entries pertaining to states and UTs which do not have their own high court
		
		stateHC.put("12165662", highCourtsList.get(2));
		stateHC.put("1271157", highCourtsList.get(2));
		stateHC.put("12096464", highCourtsList.get(10));
		stateHC.put("1259223", highCourtsList.get(19));
		stateHC.put("1270260", highCourtsList.get(19));
		stateHC.put("1265206", highCourtsList.get(13));
		stateHC.put("1278647", highCourtsList.get(3));
		stateHC.put("1278341", highCourtsList.get(6));
		stateHC.put("1262963", highCourtsList.get(6));
		stateHC.put("1262271", highCourtsList.get(6));
		stateHC.put("1259424", highCourtsList.get(15));
		
//      String districtCourt = myOnt.addSubClass(indianCourt, "District Court");		
//		Set myStates = listFilesUsingDirectoryStream("courts");
//		Iterator<String> namesIterator = myStates.iterator();
//		while(namesIterator.hasNext()) {
//			String path = "courts/";
//			String name = namesIterator.next();
//			String dcName = path + name;
////			String dcOf = name.substring(0, name.length()-4) + " District Court";
////			String dcSub = myOnt.addSubClass(districtCourt, dcOf);
//			ArrayList<String> districtCourtsList = myOnt.addIndividuals(districtCourt, myOnt.entitiesFromFile(dcName, "", " District Court"));
//			}
		
		// Connecting Indian courts with jurisdiction types
		
		myOnt.addNewObjectProperty("hasJurisdictionType", indianCourt, "http://lmss.sali.org/R9sbuHkJC9aqDlHAgw58VSB");
		
		// Random tests
		
		System.out.println(myOnt.getSubclasses("http://lmss.sali.org/RF70104541ceaCF746bCCc18").size());
		System.out.println(myOnt.getClassesByLabel("Haryana"));
		System.out.println(myOnt.getSuperclasses("http://lmss.sali.org/R21A70108F1b04360b3508e1"));
		
		// Creating and linking district courts and asserting location data and types
		
		HashMap<String, String> stateUT = (HashMap<String, String>) GeoNamesHandler.getObject("stateUT.txt");
		HashMap<String, HashMap<String, String>> district_by_stateUT = (HashMap<String, HashMap<String, String>>) GeoNamesHandler.getObject("district_by_stateUT.txt");
		for (String geonameId : stateUT.keySet()) {
			String stateUTIRI = GeoNamesHandler.getGeoIRI(geonameId);
			myOnt.assertObjectPropertyAxiom(countryIRI, stateUTIRI, "http://schema.org/containsPlace");
			System.out.println("The state of " + stateUT.get(geonameId) + " has the following districts: ");
			HashMap<String, String> inner = district_by_stateUT.get(geonameId);
	    	for (String geonameId_inner : inner.keySet()) {
	    		String myDistrictCourt = myOnt.addIndividual(districtCourt, BatchUpdate_final.getCleanString(inner.get(geonameId_inner), "district") + " District Court");
	    		myOnt.assertObjectPropertyAxiom(myDistrictCourt, GeoNamesHandler.getGeoIRI(geonameId_inner), "http://www.geonames.org/ontology#locatedIn");
	    		String districtIRI = GeoNamesHandler.getGeoIRI(geonameId_inner);
				myOnt.labelEntity(districtIRI, inner.get(geonameId_inner), false);
				myOnt.setType(districtIRI, district);
				myOnt.assertObjectPropertyAxiom(stateUTIRI, districtIRI, "http://schema.org/containsPlace");
	    		System.out.println(BatchUpdate_final.getCleanString(inner.get(geonameId_inner), "district") + " " + geonameId_inner);
	    		myOnt.assertObjectPropertyAxiom(myDistrictCourt, stateHC.get(geonameId), precededBy);
	    		myOnt.assertObjectPropertyAxiom(stateHC.get(geonameId), myDistrictCourt, hasPrecedenceOver);
			}
			myOnt.labelEntity(stateUTIRI, stateUT.get(geonameId), false);
			//myOnt.addIndividualByIRI(stateUTIRI, stateUT.get(geonameId));
			myOnt.setType(stateUTIRI, state);
		}
		myOnt.labelEntity(countryIRI, "India", false);
		myOnt.setType(countryIRI, country);
		
		// Saving the ontology as an OWL file
		
    	myOnt.saveOntology("IndiLegalOnt.owl");
    	System.out.println("Creation of new ontology completed!");
	}
}